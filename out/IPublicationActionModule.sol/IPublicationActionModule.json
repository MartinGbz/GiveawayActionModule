{"abi":[{"type":"function","name":"initializePublicationAction","inputs":[{"name":"profileId","type":"uint256","internalType":"uint256"},{"name":"pubId","type":"uint256","internalType":"uint256"},{"name":"transactionExecutor","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"nonpayable"},{"type":"function","name":"processPublicationAction","inputs":[{"name":"processActionParams","type":"tuple","internalType":"struct Types.ProcessActionParams","components":[{"name":"publicationActedProfileId","type":"uint256","internalType":"uint256"},{"name":"publicationActedId","type":"uint256","internalType":"uint256"},{"name":"actorProfileId","type":"uint256","internalType":"uint256"},{"name":"actorProfileOwner","type":"address","internalType":"address"},{"name":"transactionExecutor","type":"address","internalType":"address"},{"name":"referrerProfileIds","type":"uint256[]","internalType":"uint256[]"},{"name":"referrerPubIds","type":"uint256[]","internalType":"uint256[]"},{"name":"referrerPubTypes","type":"uint8[]","internalType":"enum Types.PublicationType[]"},{"name":"actionModuleData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"initializePublicationAction(uint256,uint256,address,bytes)":"0b960220","processPublicationAction((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))":"90ce6e08"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transactionExecutor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initializePublicationAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"publicationActedProfileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicationActedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actorProfileId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"actorProfileOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transactionExecutor\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"referrerProfileIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"referrerPubIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Types.PublicationType[]\",\"name\":\"referrerPubTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes\",\"name\":\"actionModuleData\",\"type\":\"bytes\"}],\"internalType\":\"struct Types.ProcessActionParams\",\"name\":\"processActionParams\",\"type\":\"tuple\"}],\"name\":\"processPublicationAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Lens Protocol\",\"kind\":\"dev\",\"methods\":{\"initializePublicationAction(uint256,uint256,address,bytes)\":{\"custom:permissions\":\"LensHub.\",\"params\":{\"data\":\"Arbitrary data passed from the user to be decoded by the Action Module during initialization.\",\"profileId\":\"The profile ID of the author publishing the content with this Publication Action.\",\"pubId\":\"The publication ID being published.\",\"transactionExecutor\":\"The address of the transaction executor (e.g. for any funds to transferFrom).\"},\"returns\":{\"_0\":\"bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by indexers or UIs.\"}},\"processPublicationAction((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))\":{\"custom:permissions\":\"LensHub.\",\"params\":{\"processActionParams\":\"The parameters needed to execute the publication action.\"},\"returns\":{\"_0\":\"bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by indexers or UIs.\"}}},\"title\":\"IPublicationAction\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initializePublicationAction(uint256,uint256,address,bytes)\":{\"notice\":\"Initializes the action module for the given publication being published with this Action module.\"},\"processPublicationAction((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))\":{\"notice\":\"Processes the action for a given publication. This includes the action's logic and any monetary/token operations.\"}},\"notice\":\"This is the standard interface for all Lens-compatible Publication Actions. Publication action modules allow users to execute actions directly from a publication, like:  - Minting NFTs.  - Collecting a publication.  - Sending funds to the publication author (e.g. tipping).  - Etc. Referrers are supported, so any publication or profile that references the publication can receive a share from the publication's action if the action module supports it.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/lens/IPublicationActionModule.sol\":\"IPublicationActionModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":layerzero/=lib/layerzero/contracts/\",\":lens/=lib/lens/\",\":open-zeppelin/=lib/open-zeppelin/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/lens/IPublicationActionModule.sol\":{\"keccak256\":\"0x9cc95f0a541b1e4245f613fa26f012bf9e8a2e351b4f2075c10f76467e30fd44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c10d6f73fedbda96c3112ad93e93675a1f0d6f164c45e2cc07bd109fa158c11b\",\"dweb:/ipfs/QmPvQr9sDnuJZSzE17uPmzXQmVx1zC7ZKwpKEpXavEd42o\"]},\"lib/lens/Types.sol\":{\"keccak256\":\"0x2106149c35f24f9e58f79d138f65ed77c8022305ed2b35be22f6f0736f9cafda\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://46da0756894b5734b9bd29a67dd782763d76a74913b08098c3a719a293a38b00\",\"dweb:/ipfs/QmTh59bH3ZfhfYtGxBEV1tpbrGVC4rGHBBWYnKJTMFwi5Z\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"profileId","type":"uint256"},{"internalType":"uint256","name":"pubId","type":"uint256"},{"internalType":"address","name":"transactionExecutor","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"initializePublicationAction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"struct Types.ProcessActionParams","name":"processActionParams","type":"tuple","components":[{"internalType":"uint256","name":"publicationActedProfileId","type":"uint256"},{"internalType":"uint256","name":"publicationActedId","type":"uint256"},{"internalType":"uint256","name":"actorProfileId","type":"uint256"},{"internalType":"address","name":"actorProfileOwner","type":"address"},{"internalType":"address","name":"transactionExecutor","type":"address"},{"internalType":"uint256[]","name":"referrerProfileIds","type":"uint256[]"},{"internalType":"uint256[]","name":"referrerPubIds","type":"uint256[]"},{"internalType":"enum Types.PublicationType[]","name":"referrerPubTypes","type":"uint8[]"},{"internalType":"bytes","name":"actionModuleData","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"processPublicationAction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]}],"devdoc":{"kind":"dev","methods":{"initializePublicationAction(uint256,uint256,address,bytes)":{"custom:permissions":"LensHub.","params":{"data":"Arbitrary data passed from the user to be decoded by the Action Module during initialization.","profileId":"The profile ID of the author publishing the content with this Publication Action.","pubId":"The publication ID being published.","transactionExecutor":"The address of the transaction executor (e.g. for any funds to transferFrom)."},"returns":{"_0":"bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by indexers or UIs."}},"processPublicationAction((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))":{"custom:permissions":"LensHub.","params":{"processActionParams":"The parameters needed to execute the publication action."},"returns":{"_0":"bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by indexers or UIs."}}},"version":1},"userdoc":{"kind":"user","methods":{"initializePublicationAction(uint256,uint256,address,bytes)":{"notice":"Initializes the action module for the given publication being published with this Action module."},"processPublicationAction((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))":{"notice":"Processes the action for a given publication. This includes the action's logic and any monetary/token operations."}},"version":1}},"settings":{"remappings":["ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","layerzero/=lib/layerzero/contracts/","lens/=lib/lens/","open-zeppelin/=lib/open-zeppelin/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/lens/IPublicationActionModule.sol":"IPublicationActionModule"},"evmVersion":"paris","libraries":{}},"sources":{"lib/lens/IPublicationActionModule.sol":{"keccak256":"0x9cc95f0a541b1e4245f613fa26f012bf9e8a2e351b4f2075c10f76467e30fd44","urls":["bzz-raw://c10d6f73fedbda96c3112ad93e93675a1f0d6f164c45e2cc07bd109fa158c11b","dweb:/ipfs/QmPvQr9sDnuJZSzE17uPmzXQmVx1zC7ZKwpKEpXavEd42o"],"license":"MIT"},"lib/lens/Types.sol":{"keccak256":"0x2106149c35f24f9e58f79d138f65ed77c8022305ed2b35be22f6f0736f9cafda","urls":["bzz-raw://46da0756894b5734b9bd29a67dd782763d76a74913b08098c3a719a293a38b00","dweb:/ipfs/QmTh59bH3ZfhfYtGxBEV1tpbrGVC4rGHBBWYnKJTMFwi5Z"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/lens/IPublicationActionModule.sol","id":43548,"exportedSymbols":{"IPublicationActionModule":[43547],"Types":[44025]},"nodeType":"SourceUnit","src":"33:2111:22","nodes":[{"id":43520,"nodeType":"PragmaDirective","src":"33:24:22","nodes":[],"literals":["solidity",">=","0.6",".0"]},{"id":43522,"nodeType":"ImportDirective","src":"59:37:22","nodes":[],"absolutePath":"lib/lens/Types.sol","file":"lens/Types.sol","nameLocation":"-1:-1:-1","scope":43548,"sourceUnit":44026,"symbolAliases":[{"foreign":{"id":43521,"name":"Types","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44025,"src":"67:5:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":43547,"nodeType":"ContractDefinition","src":"648:1496:22","nodes":[{"id":43537,"nodeType":"FunctionDefinition","src":"1384:191:22","nodes":[],"documentation":{"id":43524,"nodeType":"StructuredDocumentation","src":"689:690:22","text":" @notice Initializes the action module for the given publication being published with this Action module.\n @custom:permissions LensHub.\n @param profileId The profile ID of the author publishing the content with this Publication Action.\n @param pubId The publication ID being published.\n @param transactionExecutor The address of the transaction executor (e.g. for any funds to transferFrom).\n @param data Arbitrary data passed from the user to be decoded by the Action Module during initialization.\n @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\n indexers or UIs."},"functionSelector":"0b960220","implemented":false,"kind":"function","modifiers":[],"name":"initializePublicationAction","nameLocation":"1393:27:22","parameters":{"id":43533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43526,"mutability":"mutable","name":"profileId","nameLocation":"1438:9:22","nodeType":"VariableDeclaration","scope":43537,"src":"1430:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43525,"name":"uint256","nodeType":"ElementaryTypeName","src":"1430:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":43528,"mutability":"mutable","name":"pubId","nameLocation":"1465:5:22","nodeType":"VariableDeclaration","scope":43537,"src":"1457:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43527,"name":"uint256","nodeType":"ElementaryTypeName","src":"1457:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":43530,"mutability":"mutable","name":"transactionExecutor","nameLocation":"1488:19:22","nodeType":"VariableDeclaration","scope":43537,"src":"1480:27:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":43529,"name":"address","nodeType":"ElementaryTypeName","src":"1480:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":43532,"mutability":"mutable","name":"data","nameLocation":"1532:4:22","nodeType":"VariableDeclaration","scope":43537,"src":"1517:19:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":43531,"name":"bytes","nodeType":"ElementaryTypeName","src":"1517:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1420:122:22"},"returnParameters":{"id":43536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43535,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":43537,"src":"1561:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43534,"name":"bytes","nodeType":"ElementaryTypeName","src":"1561:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1560:14:22"},"scope":43547,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":43546,"nodeType":"FunctionDefinition","src":"2004:138:22","nodes":[],"documentation":{"id":43538,"nodeType":"StructuredDocumentation","src":"1581:418:22","text":" @notice Processes the action for a given publication. This includes the action's logic and any monetary/token\n operations.\n @custom:permissions LensHub.\n @param processActionParams The parameters needed to execute the publication action.\n @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\n indexers or UIs."},"functionSelector":"90ce6e08","implemented":false,"kind":"function","modifiers":[],"name":"processPublicationAction","nameLocation":"2013:24:22","parameters":{"id":43542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43541,"mutability":"mutable","name":"processActionParams","nameLocation":"2073:19:22","nodeType":"VariableDeclaration","scope":43546,"src":"2038:54:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ProcessActionParams_$43906_calldata_ptr","typeString":"struct Types.ProcessActionParams"},"typeName":{"id":43540,"nodeType":"UserDefinedTypeName","pathNode":{"id":43539,"name":"Types.ProcessActionParams","nameLocations":["2038:5:22","2044:19:22"],"nodeType":"IdentifierPath","referencedDeclaration":43906,"src":"2038:25:22"},"referencedDeclaration":43906,"src":"2038:25:22","typeDescriptions":{"typeIdentifier":"t_struct$_ProcessActionParams_$43906_storage_ptr","typeString":"struct Types.ProcessActionParams"}},"visibility":"internal"}],"src":"2037:56:22"},"returnParameters":{"id":43545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43544,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":43546,"src":"2128:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43543,"name":"bytes","nodeType":"ElementaryTypeName","src":"2128:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2127:14:22"},"scope":43547,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IPublicationActionModule","contractDependencies":[],"contractKind":"interface","documentation":{"id":43523,"nodeType":"StructuredDocumentation","src":"98:549:22","text":" @title IPublicationAction\n @author Lens Protocol\n @notice This is the standard interface for all Lens-compatible Publication Actions.\n Publication action modules allow users to execute actions directly from a publication, like:\n  - Minting NFTs.\n  - Collecting a publication.\n  - Sending funds to the publication author (e.g. tipping).\n  - Etc.\n Referrers are supported, so any publication or profile that references the publication can receive a share from the\n publication's action if the action module supports it."},"fullyImplemented":false,"linearizedBaseContracts":[43547],"name":"IPublicationActionModule","nameLocation":"658:24:22","scope":43548,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":22}